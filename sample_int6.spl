
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=7;
//SAVING SP
alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=userSP;
SP=([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512)-1;
alias filedesc R1;
filedesc=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];

alias wordAddl R2;
wordAddl=[[PTBR+2*((userSP-3)/512)]*512+(userSP-3)%512];

//if read is done from terminal
if(filedesc==-1)then 
 	multipush(R0,R1,R2);
 	R1=4;
	R3=wordAddl;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_4;
	multipop(R0,R1,R2);

else  
	//reading from file
	//filedescriptor is not valid
	if(filedesc<0 || filedesc>7)then
	[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=userSP;
	ireturn;
         endif;
	//if resource identifier of process is invalid or not file
	if([[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+filedesc*2]!=0)then
	[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=userSP;
	ireturn;
           endif;
       
	//locating open file index and inode index of file
	alias tab_index R3;
	tab_index=[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+filedesc*2+1];
	alias i_index R4;
	i_index=[OPEN_FILE_TABLE+tab_index*4];
	//acquiring inode by calling module 0

	multipush(R0,R1,R2,R3,R4);
	R1=4;
	R2=i_index;
	R3=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	R5=R0;
	multipop(R0,R1,R2,R3,R4);
	//if acquiring inode fails return -1;
	if(R5==-1)then
	[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=userSP;
	ireturn;
         endif;
      
//getting lseek position and physical address of memory buffer given as input

    alias lseek R5;
     alias paddw R6;
   lseek=[OPEN_FILE_TABLE+tab_index*4+2];
    paddw=[PTBR+2*(wordAddl/512)]*512+wordAddl%512;

	//if file corresponding root file
    
    

 if([OPEN_FILE_TABLE+tab_index*4]==INODE_ROOT)then

     if(lseek==480)then
       //release inode
       multipush(R0,R1,R2,R3,R4,R5,R6);
        R1=5;
        R2=i_index;
       R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6);

	[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-2;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=userSP;
	ireturn;
        endif;
      

//read from the word of memory copy of root file and incrementing lseek also
      [paddw]=[ROOT_FILE+lseek];

        [OPEN_FILE_TABLE+tab_index*4+2]=[OPEN_FILE_TABLE+tab_index*4+2]+1;

 else    
         if(lseek==[INODE_TABLE+i_index*16+2])then
           multipush(R0,R1,R2,R3,R4,R5,R6);
        R1=5;
        R2=i_index;
       R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6);

	[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-2;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=userSP;
          ireturn ;
           endif;

              //Find the disk block number and the position in the block from which input is read.
        alias disk_blkn R7;
          disk_blkn=[INODE_TABLE+i_index*16+8+lseek/512];
          alias disk_off R8;
           disk_off=lseek%512;
         //calling buffer read function call
         multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
          R1=2;
          R2=disk_blkn;
          R3=disk_off;
          R4=paddw;
           call MOD_3;
             multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
  
                [OPEN_FILE_TABLE+tab_index*4+2]=[OPEN_FILE_TABLE+tab_index*4+2]+1;
   endif;
    //calling release inode function
       multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
        R1=5;
        R2=i_index;
       R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);

//reset mode flag
endif;
 [[PTBR+2*(userSP-1)/512]*512+(userSP-1)%512]=0;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP=userSP;
ireturn;

