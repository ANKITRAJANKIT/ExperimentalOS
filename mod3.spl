alias funNum R1;
//IMPLEMENTING OPEN ................FUNCTION IN FILE MANAGER
if(funNum==3)then
alias filename R2;
alias i_index R3;
 i_index=0;
//locate file in inode table
while(i_index<60)do

if([INODE_TABLE+i_index*16+1]==filename)then
  break;
 endif;
i_index=i_index+1;
endwhile;
//file not found
if(i_index==60)then
 R0=-1;
 return ;
endif;
//calling acquire inode from mod0
multipush(R0,R1,R2,R3);
R1=4;
R2=i_index;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3);
//locking fails
if(R0==-1)then
return;
endif;
if([INODE_TABLE+i_index*16]==EXEC)then
//release inode
multipush(R0,R1,R2,R3);
R1=5;
R2=i_index;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3);
R0=-1;
return;
endif;

//searching for open file table entry
alias count R4;
count=0;
while(count<32)do
if([OPEN_FILE_TABLE+count*4]==-1)then
 break;
endif;
count=count+1;
endwhile;

//no free entry in open file table
if(count==32)then

//release inode
multipush(R0,R1,R2,R3,R4);
R1=5;
R2=i_index;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4);
R0=-2;
return;
endif;

//filenam is root
if(filename==ROOT)then
[OPEN_FILE_TABLE+count*4]=INODE_ROOT;

else if([FILE_STATUS_TABLE+i_index*4+1]==-1)then
     [FILE_STATUS_TABLE+i_index*4+1]=1;
      else [FILE_STATUS_TABLE+i_index*4+1]=[FILE_STATUS_TABLE+i_index*4+1]+1;
    endif;

//setting inode index in file open table
[OPEN_FILE_TABLE+count*4]=i_index;
endif;

//Set the OPEN INSTANCE COUNT to 1 and LSEEK to 0 in the open file tbal entry
[OPEN_FILE_TABLE+count*4+1]=1;
[OPEN_FILE_TABLE+count*4+2]=0;

//calling release inode function
multipush(R0,R1,R2,R3,R4);
R1=5;
R2=i_index;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4);

//open file table index 
R0=count;
return ;
endif;

//IMPLEMENTING CLOSE .................FUNCTION IN FILE MANAGER
if(funNum==4)then
alias tab_index R2;
alias i_index R3;
//getting inode index of a file
i_index=[OPEN_FILE_TABLE+tab_index*4];

//dec open instance count
[OPEN_FILE_TABLE+tab_index*4+1]=[OPEN_FILE_TABLE+tab_index*4+1]-1;

//if open instance count become 0
if([OPEN_FILE_TABLE+tab_index*4+1]==0)then
//invalidating all entries
[OPEN_FILE_TABLE+tab_index*4]=-1;
[OPEN_FILE_TABLE+tab_index*4+1]=-1;
[OPEN_FILE_TABLE+tab_index*4+2]=-1;
endif;
//if file is not root
if(i_index!=INODE_ROOT)then
 [FILE_STATUS_TABLE+i_index*16+1]= [FILE_STATUS_TABLE+i_index*16+1]-1;
//open count in file status 0
if([FILE_STATUS_TABLE+i_index*16+1]==0)then
    [FILE_STATUS_TABLE+i_index*16+1]=-1;
   endif;
    endif;
return; 
endif;

//IMPLEMENTING BUFFER READ && BUFFER WRITE .................FUNCTION IN FILE MANAGER

    if(funNum==2||funNum==1)then


      alias disk_blkn R2;
       alias disk_off R3;
       alias memadd R4;
     alias buffno R5;
  // Buffer Number = (Disk Number % 4) is a simple scheme,   
       buffno=disk_blkn%4;
    

     //calling acquire buffer from module 0
     multipush(R0,R1,R2,R3,R4,R5);
      R1=1;
      R2=buffno;
     R3=[SYSTEM_STATUS_TABLE+1];
     call MOD_0;
     multipop(R0,R1,R2,R3,R4,R5);
    

   //if buffer contain different block number
     if([BUFFER_TABLE+buffno*4]!=disk_blkn)then

        //check DIRTY BIT of buffer table  
        if([BUFFER_TABLE+buffno*4+1]==1)then
          //calling disk store 
         multipush(R0,R1,R2,R3,R4,R5);
      R1=1;
     R2=[SYSTEM_STATUS_TABLE+1];
     R3=71+buffno;
      R4=[BUFFER_TABLE+buffno*4];
     call MOD_4;
     multipop(R0,R1,R2,R3,R4,R5);
    //setting dirty bit  to 0
    [BUFFER_TABLE+buffno*4+1]=0;
     endif;
 
    //loading required disk block number by calling disk load

       multipush(R0,R1,R2,R3,R4,R5);
      R1=2;
      R4=disk_blkn;
     R2=[SYSTEM_STATUS_TABLE+1];
     R3=71+buffno;
     call MOD_4;
     multipop(R0,R1,R2,R3,R4,R5);

    [BUFFER_TABLE+buffno*4]=disk_blkn;

 endif;

//Copy the contents in the offset location in the buffer to the
    
     if(funNum==2)then
    [memadd]=[(71+buffno)*512+disk_off];
   
  
    else 
        [(71+buffno)*512+disk_off]=memadd;
         [BUFFER_TABLE+buffno*4+1]=1;
     endif;
        

//release bufferby calling release buffer

     multipush(R0,R1,R2,R3,R4,R5);
      R1=2;
      R2=buffno;
     R3=[SYSTEM_STATUS_TABLE+1];
     call MOD_0;
     multipop(R0,R1,R2,R3,R4,R5);

  return ;
   endif;

        

       
       











