alias functionNum R1;
alias currentPID R2;
breakpoint;
//IMPLEMENTING ACQUIRE --------BUFFER
 if(functionNum==1)then
   alias buffno R2;
    alias currpid R3;
    while([BUFFER_TABLE+buffno*4+2]!=-1)do
      [PROCESS_TABLE+currpid*16+4]=WAIT_BUFFER;
       [PROCESS_TABLE+currpid*16+5]=buffno;
     
    multipush(R0,R1,R2,R3);
     call MOD_5;
    multipop(R0,R1,R2,R3);
      endwhile;
  
[BUFFER_TABLE+buffno*4+2]=currpid;
     return ;
    endif;

//IMPLEMENTING RELEASE --------BUFFER
 if(functionNum==2)then
   alias buffno R2;
    alias currpid R3;
    //given pid is not equal to locking pid
     if([BUFFER_TABLE+buffno*4+2]!=currpid)then
         R0=-1;
          return ;
        endif;
[BUFFER_TABLE+buffno*4+2]=-1;
//awaking all the process which is waiting for this buffer
 alias pid R4;
  pid=0;
  while(pid<16)do
  if([PROCESS_TABLE+pid*16+4]==WAIT_BUFFER&&[PROCESS_TABLE+pid*16+5]==buffno)then


 [PROCESS_TABLE+pid*16+4]=READY;
  endif;
pid=pid+1;
endwhile;
  R0=0;
   return; 
   endif;     



//IMPLEMENTING ACQUIRE ----------INODE
if(functionNum==4)then
alias i_index  R2;
alias curpid R3;
//checking lock field in file status table
while([FILE_STATUS_TABLE+i_index*4]==1)do
[PROCESS_TABLE+curpid*16+4]=WAIT_FILE;
[PROCESS_TABLE+curpid*16+5]=i_index;
multipush(R0,R1,R2,R3);
call MOD_5;
multipop(R0,R1,R2,R3);
endwhile;

//if inode becomes invalid
if([INODE_TABLE+i_index*16+1]==-1)then
 R0=-1;
 return ;
endif;
//put pid in file status table
[FILE_STATUS_TABLE+i_index*4]=curpid;

R0=0;
return;
endif;

//IMPLEMENTING --------RELEASE INODE
if(functionNum==5)then
alias i_index  R2;
alias curpid R3;
//locking pid is not equal to given pid
if([FILE_STATUS_TABLE+i_index*4]!=curpid)then
  R0=-1;
 return ;
endif;
//set lock pid field to -1
[FILE_STATUS_TABLE+i_index*4]=-1;

alias count R4;
count=0;
while(count<16)do
if([PROCESS_TABLE+count*16+4]==WAIT_FILE&&[PROCESS_TABLE+count*16+5]==i_index)then
[PROCESS_TABLE+count*16+4]=READY;
endif;
count=count+1;
endwhile;
R0=0;
return ;
endif;








//IMPLEMENTING ACQUIRE --------- SEMAPHORE
  if(functionNum==6)then
alias count R3;
count=0;
while(count<32)do
if([SEMAPHORE_TABLE+4*count+1]==0)then
   break;
   endif;
  count=count+1;
 endwhile;
//if no free entry
if(count==32)then
R0=-1;
return ;
endif;
//setting process count to 1 and locking pid
[SEMAPHORE_TABLE+4*count+1]=1;
[SEMAPHORE_TABLE+4*count]=-1;
R0=count;
return ;
endif;
//IMPLEMENTING -----RELEASE SEMAPHORE
if(functionNum==7)then
if([SEMAPHORE_TABLE+R2*4]==R3)then
[SEMAPHORE_TABLE+R2*4]=-1;
alias count R4;
  count=0;
//SETTING STATE OF ALL PROCESS WAITING FOR THIS SEMAPHORE TO READY

while(count<16)do
if([PROCESS_TABLE+count*16+4]==WAIT_SEMAPHORE&&[PROCESS_TABLE+count*16+5]==R2)
then
[PROCESS_TABLE+count*16+4]=READY;
endif;
count=count+1;
endwhile;
endif;
[SEMAPHORE_TABLE+R2*4+1]=[SEMAPHORE_TABLE+R2*4+1]-1;
R0=0;
return;
endif;



//acquire ---------------terminal
if(functionNum==8)then
while([TERMINAL_STATUS_TABLE]==1)do
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_TERMINAL;
multipush(R0,R1,R2,R3);
call MOD_5;
multipop(R0,R1,R2,R3);
endwhile;
[TERMINAL_STATUS_TABLE]=1;
[TERMINAL_STATUS_TABLE+1]=currentPID;

return;
endif;
//RELEASE --------------TERMINAL
breakpoint;
if(functionNum==9)then
if(currentPID==[TERMINAL_STATUS_TABLE+1])then
[TERMINAL_STATUS_TABLE]=0;
alias pid R4;
pid=0;
while(pid<=15)do
 if([PROCESS_TABLE+pid*16+4]==WAIT_TERMINAL)then
  [PROCESS_TABLE+pid*16+4]=READY;
  endif;
pid=pid+1;
endwhile;
R0=0;
return ;
else R0=-1;
    return;
endif;
endif;
//ACQUIRE ---------DISK
 if(functionNum==3)then
  while([DISK_STATUS_TABLE]==1)do
  [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_DISK;
   multipush(R0,R1,R2,R3,R4,R5);
   call MOD_5;
   multipop(R0,R1,R2,R3,R4,R5);
   endwhile;
   [DISK_STATUS_TABLE]=1;
   [DISK_STATUS_TABLE+4]=currentPID;
    return; 
   endif;

