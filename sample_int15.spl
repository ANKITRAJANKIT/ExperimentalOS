[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=21;
//SAVING SP
alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=userSP;
SP=([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512)-1;
//if current process is not shell
if([SYSTEM_STATUS_TABLE+1]!=1||[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3]!=1)then

[[PTBR+2*(userSP-1)/512]*512+(userSP-1)%512]=-1;
SP=userSP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
ireturn; 
endif;
//killing all process except idle and init 
alias pid R2;
  multipush(R0,R1,R2);
   R1=5;
   R2=[SYSTEM_STATUS_TABLE+1];
   call MOD_1;
  multipop(R0,R1,R2);

//storing all buffer page when dirty bit set
pid=0;
while(pid<4)do
if([BUFFER_TABLE+pid*4+1]==1&&[BUFFER_TABLE+pid*4]!=-1)then
multipush(R0,R1,R2);
R1=1;
R3=71+pid;
R4=[BUFFER_TABLE+pid*4];
R2=[SYSTEM_STATUS_TABLE+1];
print [BUFFER_TABLE+pid*4];
call MOD_4;
multipop(R0,R1,R2);
endif;
pid=pid+1;
endwhile;

//storing inode tablea and user table
multipush(R0);
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
R3=59;
R4=3;
call MOD_4;
multipop(R0);
multipush(R0);
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
R3=60;
R4=4;
call MOD_4;
multipop(R0);

//storing root file
multipush(R0);
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
R3=62;
R4=5;
call MOD_4;
multipop(R0);
//storing disk free list
multipush(R0);
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
R3=61;
R4=2;
call MOD_4;
multipop(R0);

halt;



