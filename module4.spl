
alias functionNum R1;
alias currentPID R2;
//IMPLEMENTIG .............TERMINAL WRITE
//IMPLEMENTING ACQUIRE TERMINAL MODULE WRITE
if(functionNum==3)then

multipush(R1,R2,R3);
R1=8;
R2=currentPID;
call MOD_0;

multipop(R1,R2,R3);


print R3;

//IMPLEMENTING RELEASE MODULE FOR WRITE
multipush(R1,R2,R3);
R1=9;
R2=currentPID;
call MOD_0;
multipop(R1,R2,R3);
return;
endif;
//IMPLEMENTING .........TERMINAL READ
if(functionNum==4)then
multipush(R1,R2,R3);
R1=8;
R2=currentPID;
call MOD_0;
multipop(R1,R2,R3);
read;
[PROCESS_TABLE+currentPID*16+4]=WAIT_TERMINAL;
multipush(R1,R2,R3);
call MOD_5;
multipop(R1,R2,R3);
alias word R3;
alias buffer_value R4;
alias physicaladd R5;
buffer_value=[PROCESS_TABLE+currentPID*16+8];
physicaladd=[PTBR+2*(word/512)]*512+word%512;
[physicaladd]=buffer_value;
return;
endif;
//IMPLEMENTING .......DISK .......LOAD
if(functionNum==2)then 
 multipush(R0,R1,R2,R3,R4);
  R1=3;
  R2=currentPID;
  call MOD_0;
  multipop(R0,R1,R2,R3,R4);
  //UPDATING DISK STATUS TABLE
  [DISK_STATUS_TABLE]=1;
  [DISK_STATUS_TABLE+1]=0;
  [DISK_STATUS_TABLE+2]=R3;
  [DISK_STATUS_TABLE+3]=R4;
  [DISK_STATUS_TABLE+4]=currentPID;
  load(R3,R4);
  [PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
  call MOD_5;
  return ;
  endif;

//IMPLEMENTING .......DISK .......STORE
if(functionNum==1)then 
 multipush(R0,R1,R2,R3,R4);
  R1=3;
  R2=currentPID;
  call MOD_0;
  multipop(R0,R1,R2,R3,R4);
  breakpoint;
//UPDATING DISK STATUS TABLE
  [DISK_STATUS_TABLE]=1;
  [DISK_STATUS_TABLE+1]=1;
  [DISK_STATUS_TABLE+2]=R3;
  [DISK_STATUS_TABLE+3]=R4;
  [DISK_STATUS_TABLE+4]=currentPID;
  store(R3,R4);
[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
  call MOD_5;
  return ;
  endif;




  


