//load library
loadi(63,13);
loadi(64,14);
//load init program
loadi(65,7);
loadi(66,8);
//load ..int4
loadi(10,23);
loadi(11,24);
//load int5
loadi(12,25);
loadi(13,26);


//load ..int9
loadi(20,33);
loadi(21,34);
//load int10
loadi(22,35);
loadi(23,36);
//load int11
loadi(24,37);
loadi(25,38);
//load int13
loadi(28,41);
loadi(29,42);
//load int14
loadi(30,43);
loadi(31,44);
//load int15
loadi(32,45);
loadi(33,46);
//load int8
loadi(18,31);
loadi(19,32);
//load exhand int 7 timer
loadi(4, 17);
loadi(5, 18);
loadi(2, 15);
loadi(3, 16);
loadi(16,29);
loadi(17,30);
//load rootfile
loadi(62,5);
//load module_5
loadi(50,63);
loadi(51,64);
//load module0
loadi(40,53);
loadi(41,54);
//load......module 1
loadi(42,55);
loadi(43,56);
//load ..module 2
loadi(44,57);
loadi(45,58);
//load module3
loadi(46,59);
loadi(47,60);

//load module4
loadi(48,61);
loadi(49,62);
//loading disk interrupt handler
loadi(6,19);
loadi(7,20);
//loading console interrupt handler.
loadi(8,21);
loadi(9,22);
//loading int6.
loadi(14,27);
loadi(15,28);
//loading inode table
loadi(59,3);
loadi(60,4);
//LOAD DISK FREE LIST
loadi(61,2);
//INIATLISE STATUS FIELD OF TERMINAL
[TERMINAL_STATUS_TABLE]=0;
[DISK_STATUS_TABLE]=0;
PTBR=PAGE_TABLE_BASE+20;
//LINKING FOR INIT PROCESS
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";
[PROCESS_TABLE+17]=1;
[PROCESS_TABLE+19]=1;
[PROCESS_TABLE+20]=CREATED;
//setting memory free list
alias pageNum R1;
pageNum=0;
while(pageNum<83)do
[MEMORY_FREE_LIST+pageNum]=1;
  pageNum=pageNum+1;
  endwhile;
while(pageNum<128)do
  [MEMORY_FREE_LIST+pageNum]=0;
   pageNum=pageNum+1;
  endwhile;
[PROCESS_TABLE+29]=8*512;
[PROCESS_TABLE+30]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE+31]=10;
[PROCESS_TABLE+28]=0;
[PROCESS_TABLE+27]=80;
[76*512]=[65*512+1];
alias pid R0;
[SYSTEM_STATUS_TABLE+2]=45;
[SYSTEM_STATUS_TABLE+3]=0;
pid=2;
 while(pid<=15)
   do
 [PROCESS_TABLE+pid*16+4]=TERMINATED;
  pid=pid+1;
   endwhile;

//setting perprocesstable entry
while(pid<8)do
[80*512+496+2*pid]=-1;
pid=pid+1;
endwhile;

//initialising semaphore table
pid=0;
while(pid<32)do
[SEMAPHORE_TABLE+pid*4]=-1;
[SEMAPHORE_TABLE+pid*4+1]=0;
 pid=pid+1;
endwhile;
//INITIALISING FILE STATUS TABLE
pid=0;
while(pid<60)do
[FILE_STATUS_TABLE+4*pid]=-1;
[FILE_STATUS_TABLE+4*pid+1]=-1;
pid=pid+1;
endwhile;
//INITIALSING BUFFER TABLE
pid=0;
while(pid<4)do
[BUFFER_TABLE+pid*4]=-1;
[BUFFER_TABLE+pid*4+1]=0;
[BUFFER_TABLE+pid*4+2]=-1;
pid=pid+1;
endwhile;
//SETTING DISK MAP ENTRIES OF INIT PROGRAM
pid=0;
while(pid<10)do
if(pid==4||pid==5)then
[DISK_MAP_TABLE+10+pid]=pid+3;
else [DISK_MAP_TABLE+10+pid]=-1;
endif;
pid=pid+1;
endwhile;
//INITIALISING OPEN FILE TABLE
 pid=0;
 while(pid<32)do
  [OPEN_FILE_TABLE+pid*4]=-1;
    [OPEN_FILE_TABLE+pid*4+1]=0;
 pid=pid+1;
  endwhile;


print "boot";

return;





